#![allow(dead_code)]

use std;
use std::io::Write;

pub fn generate() {
    let fvalue_dest_path = std::path::Path::new(&std::env::var("OUT_DIR").unwrap()).join("MTF_VALUE_ARRAY.txt");
    let findex_dest_path = std::path::Path::new(&std::env::var("OUT_DIR").unwrap()).join("MTF_INDEX_ARRAY.txt");
    let fnext_dest_path  = std::path::Path::new(&std::env::var("OUT_DIR").unwrap()).join("MTF_NEXT_ARRAY.txt");
    let mut fvalue = std::io::BufWriter::new(std::fs::File::create(&fvalue_dest_path).unwrap());
    let mut findex = std::io::BufWriter::new(std::fs::File::create(&findex_dest_path).unwrap());
    let mut fnext  = std::io::BufWriter::new(std::fs::File::create(&fnext_dest_path).unwrap());

    let value_array = [
        32,  115, 256, 101, 97,  276, 355, 275, 105, 273, 111, 356, 274, 116, 110, 272,
        351, 114, 108, 117, 337, 104, 46,  269, 39,  91,  271, 267, 352, 100, 112, 99,
        44,  270, 353, 349, 354, 10,  93,  98,  350, 124, 343, 348, 268, 315, 109, 67,
        103, 335, 289, 263, 296, 121, 47,  107, 294, 232, 283, 257, 293, 295, 58,  125,
        344, 346, 311, 345, 49,  53,  56,  45,  84,  102, 341, 54,  281, 258, 342, 313,
        40,  347, 336, 68,  50,  284, 120, 333, 48,  259, 292, 291, 77,  332, 61,  36,
        299, 90,  286, 310, 106, 331, 290, 227, 51,  297, 317, 277, 233, 55,  164, 185,
        278, 138, 301, 197, 74,  266, 340, 314, 95,  334, 151, 169, 230, 72,  78,  37,
        59,  79,  319, 134, 224, 64,  228, 298, 43,  147, 76,  302, 195, 303, 308, 309,
        339, 338, 75,  262, 89,  181, 158, 156, 191, 132, 57,  168, 94,  80,  154, 85,
        316, 159, 171, 131, 163, 66,  135, 161, 96,  213, 206, 34,  184, 145, 172, 129,
        187, 137, 170, 288, 300, 282, 33,  280, 208, 194, 279, 122, 87,  306, 327, 82,
        285, 52,  261, 118, 83,  312, 324, 240, 203, 198, 200, 166, 218, 0,   1,   2,
        3,   4,   5,   6,   7,   8,   11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
        21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  127, 192, 193, 221, 223,
        238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        202, 62,  173, 205, 239, 178, 174, 204, 199, 216, 140, 236, 219, 210, 235, 9,
        167, 196, 126, 211, 189, 188, 88,  141, 207, 113, 190, 162, 234, 150, 214, 149,
        225, 215, 212, 142, 153, 201, 157, 148, 209, 175, 136, 35,  226, 152, 146, 217,
        128, 176, 144, 229, 165, 130, 180, 139, 63,  160, 179, 322, 264, 323, 70,  304,
        329, 321, 73,  260, 330, 65,  69,  326, 155, 177, 237, 143, 41,  183, 320, 71,
        265, 86,  287, 325, 92,  305, 81,  328, 38,  186, 60,  182, 318, 42,  133, 119,
        231, 307, 123, 222, 220
    ];
    write!(fvalue, "[{}]", value_array.iter().map(ToString::to_string).collect::<Vec<_>>().join(",")).unwrap();

    let index_array = [
        205, 206, 207, 208, 209, 210, 211, 212, 213, 271, 37,  214, 215, 216, 217, 218,
        219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
        0,   182, 171, 299, 95,  127, 344, 24,  80,  332, 349, 136, 32,  71,  22,  54,
        88,  68,  84,  104, 193, 69,  75,  109, 70,  154, 62,  128, 346, 94,  257, 312,
        133, 325, 165, 47,  83,  326, 318, 335, 125, 322, 116, 146, 138, 92,  126, 129,
        157, 342, 191, 196, 72,  159, 337, 188, 278, 148, 97,  25,  340, 38,  156, 120,
        168, 4,   39,  31,  29,  3,   73,  48,  21,  8,   100, 55,  18,  46,  14,  10,
        30,  281, 17,  1,   13,  19,  195, 351, 86,  53,  187, 354, 41,  63,  274, 235,
        304, 175, 309, 163, 153, 350, 131, 166, 298, 177, 113, 311, 266, 279, 291, 331,
        306, 173, 302, 137, 295, 287, 285, 122, 301, 292, 158, 328, 151, 294, 150, 161,
        313, 167, 283, 164, 110, 308, 203, 272, 155, 123, 178, 162, 174, 258, 262, 297,
        305, 329, 261, 314, 310, 149, 347, 333, 172, 111, 345, 176, 277, 276, 282, 152,
        236, 237, 185, 140, 273, 115, 201, 264, 202, 293, 256, 200, 263, 259, 170, 280,
        184, 296, 269, 275, 290, 169, 286, 289, 265, 303, 204, 268, 356, 238, 355, 239,
        132, 288, 300, 103, 134, 307, 124, 352, 57,  108, 284, 270, 267, 330, 240, 260,
        199, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
        2,   59,  77,  89,  323, 194, 147, 51,  316, 336, 117, 27,  44,  23,  33,  26,
        15,  9,   12,  7,   5,   107, 112, 186, 183, 76,  181, 58,  85,  192, 98,  338,
        179, 50,  102, 91,  90,  60,  56,  61,  52,  105, 135, 96,  180, 114, 139, 141,
        319, 341, 189, 353, 142, 143, 99,  66,  197, 79,  119, 45,  160, 106, 348, 130,
        334, 321, 315, 317, 198, 339, 327, 190, 343, 320, 324, 101, 93,  87,  121, 49,
        82,  20,  145, 144, 118, 74,  78,  42,  64,  67,  65,  81,  43,  35,  40,  16,
        28,  34,  36,  6,   11
    ];
    write!(findex, "[{}]", index_array.iter().map(ToString::to_string).collect::<Vec<_>>().join(",")).unwrap();

    write!(fnext, "[").unwrap();
    for i in 0 .. value_array.len() {
        let next = (i as f64 * 0.999999).powf(1.0 - 0.1 * (i * 256 / value_array.len()) as f64 / 256.0).trunc();
        write!(fnext, "{},", next).unwrap();
    }
    write!(fnext, "]").unwrap();
}
